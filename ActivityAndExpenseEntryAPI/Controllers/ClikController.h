//
//  ClikController.h
//  ActivityAndExpenseEntryAPI
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "Enumerator.h"
#import "EnumerationTypeEnum.h"
#import "EnumerationTypeEnumHelper.h"
#import "ProblemDetailsException.h"
#import "EnumeratorConstraints.h"
#import "Entry.h"
#import "EntryStatusEnum.h"
#import "EntryStatusEnumHelper.h"

@interface ClikController : BaseController

/**
* Completion block definition for asynchronous call to List enumerators */
typedef void (^CompletedGetListEnumerators)(BOOL success, HttpContext* context, NSArray<Enumerator> * response, NSError* error);

/**
* List enumerators
* @param    mandant    Required parameter: The mandant to operate on
* @param    type    Required parameter: The enumerator type
* @param    parentProject    Optional parameter: The parent project to filter by
* @param    xPage    Optional parameter: A server defined page reference returned in the header "x-next-page"
* @param    xPageSize    Optional parameter: How many items to return in a page
*/
- (void) listEnumeratorsAsyncWithMandant:(NSString*) mandant
                type:(enum EnumerationTypeEnum) type
                parentProject:(NSString*) parentProject
                xPage:(NSString*) xPage
                xPageSize:(NSNumber*) xPageSize
                completionBlock:(CompletedGetListEnumerators) onCompleted;

/**
* Completion block definition for asynchronous call to Read a specific enumerator */
typedef void (^CompletedGetReadASpecificEnumerator)(BOOL success, HttpContext* context, Enumerator* response, NSError* error);

/**
* Read a specific enumerator
* @param    mandant    Required parameter: The mandant to operate on
* @param    type    Required parameter: The enumerator type
* @param    mid    Required parameter: The id of the enumerator to retrieve
*/
- (void) getReadASpecificEnumeratorAsyncWithMandant:(NSString*) mandant
                type:(enum EnumerationTypeEnum) type
                mid:(NSString*) mid
                completionBlock:(CompletedGetReadASpecificEnumerator) onCompleted;

/**
* Completion block definition for asynchronous call to Read constraints for a single enumerator */
typedef void (^CompletedGetReadConstraintsForASingleEnumerator)(BOOL success, HttpContext* context, NSArray<EnumeratorConstraints> * response, NSError* error);

/**
* Read constraints for a single enumerator
* @param    mandant    Required parameter: The mandant to operate on
* @param    enumeratorType    Required parameter: The enumerator type to retrieve restrictions for
* @param    combinationConstraints    Required parameter: Includes/excludes the property combinationConstraints. Must be set explicitly to false for performance reasons.
* @param    xPage    Optional parameter: A server defined page reference returned in the header "x-next-page"
* @param    xPageSize    Optional parameter: How many items to return in a page
*/
- (void) getReadConstraintsForASingleEnumeratorAsyncWithMandant:(NSString*) mandant
                enumeratorType:(enum EnumerationTypeEnum) enumeratorType
                combinationConstraints:(BOOL) combinationConstraints
                xPage:(NSString*) xPage
                xPageSize:(NSNumber*) xPageSize
                completionBlock:(CompletedGetReadConstraintsForASingleEnumerator) onCompleted;

/**
* Completion block definition for asynchronous call to Read constraints for a single enumerator */
//typedef void (^CompletedGetReadConstraintsForASingleEnumerator)(BOOL success, HttpContext* context, EnumeratorConstraints* response, NSError* error);

/**
* Read constraints for a single enumerator
* @param    mandant    Required parameter: The mandant to operate on
* @param    enumeratorType    Required parameter: The enumerator type to retrieve restrictions for
* @param    enumeratorId    Required parameter: The id of the enumerator to retrieve restrictions for
* @param    combinationConstraints    Optional parameter: Includes/excludes the property combinationConstraints
*/
- (void) getReadConstraintsForASingleEnumeratorAsyncWithMandant:(NSString*) mandant
                enumeratorType:(enum EnumerationTypeEnum) enumeratorType
                enumeratorId:(NSString*) enumeratorId
                combinationConstraints:(NSNumber*) combinationConstraints
                completionBlock:(CompletedGetReadConstraintsForASingleEnumerator) onCompleted;

/**
* Completion block definition for asynchronous call to List entries */
typedef void (^CompletedGetListEntries)(BOOL success, HttpContext* context, NSArray<Entry> * response, NSError* error);

/**
* List entries
* @param    mandant    Required parameter: The mandant to operate on
* @param    status    Optional parameter: One or more statuses (disjunctive)
* @param    startDate    Optional parameter: The minimum date of entries
* @param    xPage    Optional parameter: A server defined page reference returned in the header "x-next-page"
* @param    xPageSize    Optional parameter: How many items to return in a page
*/
- (void) listEntriesAsyncWithMandant:(NSString*) mandant
                status:(NSArray<NSNumber*>*) status
                startDate:(NSString*) startDate
                xPage:(NSString*) xPage
                xPageSize:(NSNumber*) xPageSize
                completionBlock:(CompletedGetListEntries) onCompleted;

/**
* Completion block definition for asynchronous call to Create or update one or multiple entries independently */
typedef void (^CompletedPostCreateOrUpdateOneOrMultipleEntriesIndependently)(BOOL success, HttpContext* context, NSArray<Entry> * response, NSError* error);

/**
* Create or update one or multiple entries independently
* @param    mandant    Required parameter: The mandant to operate on
* @param    body    Optional parameter: Example: 
*/
- (void) createOrUpdateOneOrMultipleEntriesIndependentlyAsyncWithMandant:(NSString*) mandant
                body:(NSArray<Entry> *) body
                completionBlock:(CompletedPostCreateOrUpdateOneOrMultipleEntriesIndependently) onCompleted;

/**
* Completion block definition for asynchronous call to Read an entry by its id */
typedef void (^CompletedGetReadAnEntryByItsId)(BOOL success, HttpContext* context, Entry* response, NSError* error);

/**
* Read an entry by its id
* @param    mandant    Required parameter: The mandant to operate on
* @param    mid    Required parameter: The id of the entry to retrieve
*/
- (void) getReadAnEntryByItsIdAsyncWithMandant:(NSString*) mandant
                mid:(NSString*) mid
                completionBlock:(CompletedGetReadAnEntryByItsId) onCompleted;

/**
* Completion block definition for asynchronous call to Create or update an entry by id */
typedef void (^CompletedPutCreateOrUpdateAnEntryById)(BOOL success, HttpContext* context, Entry* response, NSError* error);

/**
* Create or update an entry by id
* @param    mandant    Required parameter: The mandant to operate on
* @param    mid    Required parameter: The id of the entry to retrieve
* @param    body    Optional parameter: Example: 
*/
- (void) createOrUpdateAnEntryByIdAsyncWithMandant:(NSString*) mandant
                mid:(NSString*) mid
                body:(Entry*) body
                completionBlock:(CompletedPutCreateOrUpdateAnEntryById) onCompleted;

/**
* Completion block definition for asynchronous call to Delete a an entry by id */
typedef void (^CompletedDeleteAAnEntryById)(BOOL success, HttpContext* context, NSError* error);

/**
* Delete a an entry by id
* @param    mandant    Required parameter: The mandant to operate on
* @param    mid    Required parameter: The id of the entry to retrieve
*/
- (void) deleteAAnEntryByIdAsyncWithMandant:(NSString*) mandant
                mid:(NSString*) mid
                completionBlock:(CompletedDeleteAAnEntryById) onCompleted;

@end
