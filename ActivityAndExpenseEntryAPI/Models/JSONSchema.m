//
//  JSONSchema.m
//  ActivityAndExpenseEntryAPI
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
//
#import "JSONSchema.h"

@implementation JSONSchema

/**
* TODO: Write general description for this method
*/
@synthesize type;

/**
* TODO: Write general description for this method
*/
@synthesize description;
@synthesize comment;

/**
* TODO: Write general description for this method
*/
@synthesize enumType;

/**
* TODO: Write general description for this method
*/
@synthesize isNullable;

/**
* TODO: Write general description for this method
*/
@synthesize format;

/**
* TODO: Write general description for this method
*/
@synthesize constantValue;

/**
* TODO: Write general description for this method
*/
@synthesize defaultValue;

/**
* TODO: Write general description for this method
*/
@synthesize minLength;

/**
* TODO: Write general description for this method
*/
@synthesize maxLength;

/**
* TODO: Write general description for this method
*/
@synthesize pattern;

/**
* used for numbers and formatted values (e.g. for date-time values)
*/
@synthesize minimum;

/**
* used for numbers and formatted values (e.g. for date-time values)
*/
@synthesize maximum;

/**
* TODO: Write general description for this method
*/
@synthesize multipleOf;

/**
* TODO: Write general description for this method
*/
@synthesize items;

/**
* TODO: Write general description for this method
*/
@synthesize minItems;

/**
* TODO: Write general description for this method
*/
@synthesize maxItems;

/**
* schemes for individual properties
*/
@synthesize properties;

/**
* A listing of all properties which must be present (does not determine nullability)
*/
@synthesize required;

-(id)init
{
    if (self = [super init])
    {
        self.type = [TypeEnumHelper typeEnumFromString:@"object"];
    }
    return self;
}

 /**
 * For serialization of enum TypeEnum type property as NSString*
 */
-(id) JSONObjectForType
{
     
    return [TypeEnumHelper stringFromTypeEnum:(enum TypeEnum) type withDefault:@"object"];

}

/**
 * For deserialization of enum TypeEnum type property from NSString*
 */
 
-(void)setTypeWithNSString:(NSString*) strValue
{
    type = [TypeEnumHelper typeEnumFromString:(NSString*) strValue];
  _typeString = strValue;
}


 /**
 * For serialization of enum FormatEnum type property as NSString*
 */
-(id) JSONObjectForFormat
{
     
    return [FormatEnumHelper stringFromFormatEnum:(enum FormatEnum) format withDefault: nil];

}

/**
 * For deserialization of enum FormatEnum type property from NSString*
 */
 
-(void)setFormatWithNSString:(NSString*) strValue
{
    format = [FormatEnumHelper formatEnumFromString:(NSString*) strValue];
  _formatString = strValue;
}




/**
* Key mappings for the json serialization and deserialization
*/
+(NSDictionary*) keyMap
{
    NSMutableDictionary* map = [[NSMutableDictionary alloc] init];
    [map addEntriesFromDictionary: @{
        @"type": @"type",
        @"description": @"comment",
        @"enum": @"enumType",
        @"nullable": @"isNullable",
        @"format": @"format",
        @"const": @"constValue",
        @"default": @"defaultValue",
        @"minLength": @"minLength",
        @"maxLength": @"maxLength",
        @"pattern": @"pattern",
        @"minimum": @"minimum",
        @"maximum": @"maximum",
        @"multipleOf": @"multipleOf",
        @"items": @"items",
        @"minItems": @"minItems",
        @"maxItems": @"maxItems",
        @"properties": @"properties",
        @"required": @"required"  
    }];

    return map;
}

/**
* Key mapper for json serialization and deserialization
*/
+(JSONKeyMapper*) keyMapper
{ 
  return [[JSONKeyMapper alloc] initWithDictionary: [self keyMap]];
}

/**
* Helps avoiding deserialization errors when one or more properties are missing
* @returns	True, indicating that all properties are optional for deserialization
*/
+(BOOL)propertyIsOptional:(NSString*) propertyName
{
    return YES;
}

@end
