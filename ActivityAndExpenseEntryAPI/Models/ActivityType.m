//
//  ActivityType.m
//  ActivityAndExpenseEntryAPI
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
//
#import "ActivityType.h"

@implementation ActivityType

/**
* A subset of UCUM codes with a descriptive name.
* UCUM Specification: http://unitsofmeasure.org/ucum.html
*/
@synthesize unit;

/**
* input format specifier
*/
@synthesize inputFormat;

/**
* TODO: Write general description for this method
*/
@synthesize subType;

/**
* TODO: Write general description for this method
*/
@synthesize billable;

 /**
 * For serialization of enum InputFormatEnum type property as NSString*
 */
-(id) JSONObjectForInputFormat
{
     
    return [InputFormatEnumHelper stringFromInputFormatEnum:(enum InputFormatEnum) inputFormat withDefault: nil];

}

/**
 * For deserialization of enum InputFormatEnum type property from NSString*
 */
 
-(void)setInputFormatWithNSString:(NSString*) strValue
{
    inputFormat = [InputFormatEnumHelper inputFormatEnumFromString:(NSString*) strValue];
  _inputFormatString = strValue;
}


 /**
 * For serialization of enum SubTypeEnum type property as NSString*
 */
-(id) JSONObjectForSubType
{
     
    return [SubTypeEnumHelper stringFromSubTypeEnum:(enum SubTypeEnum) subType withDefault: nil];

}

/**
 * For deserialization of enum SubTypeEnum type property from NSString*
 */
 
-(void)setSubTypeWithNSString:(NSString*) strValue
{
    subType = [SubTypeEnumHelper subTypeEnumFromString:(NSString*) strValue];
  _subTypeString = strValue;
}




/**
* Key mappings for the json serialization and deserialization
*/
+(NSDictionary*) keyMap
{
    NSMutableDictionary* map = [[NSMutableDictionary alloc] init];
    [map addEntriesFromDictionary: @{
        @"unit": @"unit",
        @"inputFormat": @"inputFormat",
        @"subType": @"subType",
        @"billable": @"billable"  
    }];
    [map addEntriesFromDictionary: [super keyMap]];   

    return map;
}

/**
* Key mapper for json serialization and deserialization
*/
+(JSONKeyMapper*) keyMapper
{ 
  return [[JSONKeyMapper alloc] initWithDictionary: [self keyMap]];
}

/**
* Helps avoiding deserialization errors when one or more properties are missing
* @returns	True, indicating that all properties are optional for deserialization
*/
+(BOOL)propertyIsOptional:(NSString*) propertyName
{
    return YES;
}

@end
