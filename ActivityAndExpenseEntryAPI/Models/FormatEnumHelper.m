//
//  FormatEnum.h
//  ActivityAndExpenseEntryAPI
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
//
#include "FormatEnumHelper.h"

/**
* Helper class implementation for FormatEnum to NSString conversion
*/
@implementation FormatEnumHelper

+(id) stringFromFormatEnum:(enum FormatEnum) formatEnum withDefault: (id) defaultValue
{
    switch(formatEnum)
    {
      case FormatUnknown:
        return nil;
        case FormatDatetime:
            return @"date-time";

        case FormatDate:
            return @"date";

        case FormatTime:
            return @"time";

        default:
            return defaultValue;
    }
}

+(NSArray<NSString*>*) stringArrayFromFormatEnumArray:(NSArray<NSNumber*>*) array
{
    NSMutableArray* enums = [[NSMutableArray alloc]init]; 
    for(NSNumber* numberValue in array){
        NSNumber* stringValue = [FormatEnumHelper stringFromFormatEnum:(enum FormatEnum) numberValue.intValue withDefault:[NSNull null]];
        [enums addObject:stringValue];
    }
    return [enums copy];
}

+(enum FormatEnum) formatEnumFromString:(NSString*) strValue
{
  strValue = nil == strValue ? @"" : strValue;
    NSArray* FormatEnumArray = [NSArray arrayWithObjects:
                                @"",
                                        @"date-time",
                                        @"date",
                                        @"time",
                                        nil];

    return (enum FormatEnum) [FormatEnumArray indexOfObject: strValue];
}


+(NSArray<NSNumber*>*) formatEnumArrayFromStringArray:(NSArray<NSString*>*) array
{
    NSMutableArray* enums = [[NSMutableArray alloc]init]; 
    for(NSString* enumValue in array){
        NSNumber* numberValue = [NSNumber numberWithInt:[ FormatEnumHelper formatEnumFromString:enumValue]];
        [enums addObject:numberValue];
    }
    return [enums copy];
}

@end
