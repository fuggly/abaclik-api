//
//  ConstraintViolation.m
//  ActivityAndExpenseEntryAPI
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
//
#import "ConstraintViolation.h"

@implementation ConstraintViolation

/**
* TODO: Write general description for this method
*/
@synthesize severity;

/**
* TODO: Write general description for this method
*/
@synthesize message;

/**
* Property name or an array index
*/
@synthesize propertyDescriptor;

/**
* a list of nested violations, relative to the specified property
*/
@synthesize violations;

-(id)init
{
    if (self = [super init])
    {
        self.severity = [SeverityEnumHelper severityEnumFromString:@"ERROR"];
    }
    return self;
}

 /**
 * For serialization of enum SeverityEnum type property as NSString*
 */
-(id) JSONObjectForSeverity
{
     
    return [SeverityEnumHelper stringFromSeverityEnum:(enum SeverityEnum) severity withDefault:@"ERROR"];

}

/**
 * For deserialization of enum SeverityEnum type property from NSString*
 */
 
-(void)setSeverityWithNSString:(NSString*) strValue
{
    severity = [SeverityEnumHelper severityEnumFromString:(NSString*) strValue];
}




/**
* Key mappings for the json serialization and deserialization
*/
+(NSDictionary*) keyMap
{
    NSMutableDictionary* map = [[NSMutableDictionary alloc] init];
    [map addEntriesFromDictionary: @{
        @"severity": @"severity",
        @"message": @"message",
        @"property": @"propertyDescriptor",
        @"violations": @"violations"  
    }];

    return map;
}

/**
* Key mapper for json serialization and deserialization
*/
+(JSONKeyMapper*) keyMapper
{ 
  return [[JSONKeyMapper alloc] initWithDictionary: [self keyMap]];
}

/**
* Helps avoiding deserialization errors when one or more properties are missing
* @returns	True, indicating that all properties are optional for deserialization
*/
+(BOOL)propertyIsOptional:(NSString*) propertyName
{
    return YES;
}

@end
